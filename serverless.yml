# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: yvc-api # NOTE: update this with your service name
package:
  artifact: dist/api/lambda.zip

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10

# you can overwrite defaults here
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  vote:
    handler: lambda.votehandler
    memorySize: 320
    events:
      - http:
          path: vote
          method: post
          cors: true

  create:
    handler: create.create
    memorySize: 320
    events:
      - http:
          path: voters
          method: post
          cors: true

  # list:
  #   handler: list.list
  #   memorySize: 320
  #   events:
  #     - http:
  #         path: voters
  #         method: get
  #         cors: true

  get:
    handler: get.get
    memorySize: 320
    events:
      - http:
          path: voters/{id}
          method: get
          cors: true

  # update:
  #   handler: update.update
  #   memorySize: 320
  #   events:
  #     - http:
  #         path: voters/{id}
  #         method: put
  #         cors: true

  # delete:
  #   handler: delete.delete
  #   memorySize: 320
  #   events:
  #     - http:
  #         path: voters/{id}
  #         method: delete
  #         cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
